{"version":3,"sources":["App.tsx"],"names":["App","useState","messages","setMessages","isTyping","setTyping","useEffect","isUnmounted","a","async","AsyncStorage","getItem","data","json","JSON","parse","console","log","length","_id","text","createdAt","Date","user","name","avatar","catch","err","error","setItem","stringify","newCompletion","incommings","message","fetch","method","headers","body","prompt","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","response","info","previousMessages","GiftedChat","append","String","Math","random","substr","trim","status","onSend","useCallback","style","flex","backgroundColor","showUserAvatar","showAvatarForEveryMessage","renderUsernameOnMessage","Platform","OS","behavior"],"mappings":"gQAUe,SAASA,IACtB,MAA+BC,mBAAqB,IAApD,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA6BF,oBAAkB,GAA/C,WAAOG,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAIC,GAAc,EAsBlB,OArBA,WAAC,iBAAAC,EAAAC,OAAA,oDACKF,EADL,mEAAAC,EAAA,MAEoBE,IAAaC,QAAQ,cAFzC,OAEOC,EAFP,OAGOC,EAAOC,KAAKC,MAAMH,GAAM,MAE9BI,QAAQC,IAAI,mBAAoBL,GAC5BC,EAAKK,OACPf,EAAYU,GAEZV,EAAY,CAAC,CACXgB,IAAI,IACJC,KAAK,gBACLC,UAAW,IAAIC,KACfC,KAAM,CACJJ,IAAI,IACJK,KAAK,UACLC,OAAO,wCAhBd,4DAAD,GAoBKC,OAAM,SAAAC,GAAG,OAAIX,QAAQY,MAAMD,MACzB,WAAQpB,GAAc,KAC7B,IAEFD,qBAAU,WAMR,OAJC,EAAAE,EAAAC,OAAA,uDACCO,QAAQC,IAAI,mBAAoBf,GADjC,WAAAM,EAAA,MAEOE,IAAamB,QAAQ,YAAaf,KAAKgB,UAAU5B,KAFxD,4DAGIwB,OAAM,SAAAC,GAAG,OAAIX,QAAQY,MAAMD,MACzB,YAAsB,KAC7B,CAACzB,IAEH,IAAM6B,EAAgB,SAAOC,GAAP,mBAAAxB,EAAAC,OAAA,uDACpBJ,GAAU,GADU,SAGZ4B,EAAUD,EAAW,GAHT,WAAAxB,EAAA,MAIK0B,MAAM,yEAA0E,CACrGC,OAAO,OACPC,QAAS,CACP,OAAS,mBACT,eAAe,oBAEjBC,KAAMvB,KAAKgB,UAAU,CACnBQ,OAAQL,EAAQb,KAChBmB,WAAY,GACZC,YAAa,GACbC,MAAM,GACNC,kBAAkB,GAClBC,iBAAiB,EACjBpB,KAAK,SAjBS,cAIZqB,EAJY,kBAAApC,EAAA,MAqBCoC,EAAS/B,QArBV,OAqBZA,EArBY,OAuBlBG,QAAQ6B,KAAK,gBAAiBhC,GAE9BV,GAAY,SAAA2C,GAAgB,OAAIC,IAAWC,OAAOF,EAAmB,CAAC,CACpE3B,IAAK8B,OAAOC,KAAKC,SAAWD,KAAKC,UAAUC,OAAO,GAClDhC,MAAOP,EAAKwB,KAAL,QAAqB,GAAGjB,MAAM,IAAIiC,OACzChC,UAAW,IAAIC,KACfC,KAAM,CACJJ,IAAI,IACJK,KAAK,UACLC,OAAO,2CAhCO,kDAqCd,KAAEmB,SACJ5B,QAAQY,MAAM,gBAAiB,KAAEgB,SAASU,OAAQ,KAAEV,SAAShC,MAE7DI,QAAQY,MAAM,gBAAiB,KAAEK,SAxCjB,yBA2ClB5B,GAAU,GA3CQ,qFA+ChBkD,EAASC,uBAAY,WAAoB,IAAnBtD,EAAkB,uDAAP,GACpC,EAAAM,EAAAC,OAAA,uDACCO,QAAQC,IAAI,SAAUH,KAAKgB,UAAU5B,IACrCC,GAAY,SAAA2C,GAAgB,OAAIC,IAAWC,OAAOF,EAAmB5C,MAFtE,WAAAM,EAAA,MAGOuB,EAAc7B,IAHrB,8DAKA,IAEH,OACE,eAAC,IAAD,CAAMuD,MAAO,CAAEC,KAAM,EAAGC,gBAAiB,QAAzC,UACE,cAAC,IAAD,CAAYzD,SAAUA,EACVE,SAAUA,EACVmD,OAAQ,SAAArD,GAAQ,OAAIqD,EAAOrD,IAC3BqB,KAAM,CAAEJ,IAAI,IAAKK,KAAK,KAAMC,OAAO,uCACnCmC,gBAAgB,EAChBC,2BAA2B,EAC3BC,yBAAyB,IAEnB,YAAhBC,IAASC,IACX,cAAC,IAAD,CAAsBC,SAAS,YAE/B,cAAC,IAAD,CAAWR,MAAM,e","file":"static/js/app.ce4d7b67.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, KeyboardAvoidingView, Platform, Dimensions } from 'react-native';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { GiftedChat, IMessage } from 'react-native-gifted-chat';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useAsyncEffect } from './hooks/useAsyncEffect';\n\n// https://5ucgrx57li.execute-api.us-east-2.amazonaws.com/live/completion\n\n\nexport default function App() {\n  const [messages,setMessages] = useState<IMessage[]>([]);\n  const [isTyping,setTyping] = useState<boolean>(true);\n\n  useEffect(() => {\n    let isUnmounted = false;\n    (async () => {\n      if (isUnmounted) return;\n      const data = await AsyncStorage.getItem('@messages');\n      const json = JSON.parse(data||'[]');\n\n      console.log('useEffect:reload', data);\n      if (json.length) {\n        setMessages(json);\n      } else {\n        setMessages([{\n          _id:'1',\n          text:'Let\\'s  begin!',\n          createdAt: new Date,\n          user: {\n            _id:'2',\n            name:'Kayleen',\n            avatar:'https://placeimg.com/140/140/tech',\n          },\n        },]);\n      }\n    })().catch(err => console.error(err));\n    return () => { isUnmounted = true; }\n  },[]);\n\n  useEffect(() => {\n    let isUnmounted = false;\n    (async () => {\n      console.log('useEffect:update', messages);\n      await AsyncStorage.setItem('@messages', JSON.stringify(messages));\n    })().catch(err => console.error(err));\n    return () => { isUnmounted = true; }\n  },[messages])\n \n  const newCompletion = async (incommings : IMessage[]) => {\n    setTyping(true);\n    try {\n      const message = incommings[0];\n      const response = await fetch('https://5ucgrx57li.execute-api.us-east-2.amazonaws.com/live/completion', {\n        method:'POST',\n        headers: {\n          'Accept':'application/json',\n          'Content-Type':'application/json',\n        },\n        body: JSON.stringify({\n          prompt: message.text,        // text\n          max_tokens: 24,    \n          temperature: 0.9, // more risky responses\n          top_p:0.3,\n          frequency_penalty:0.5,\n          presence_penalty:0.0,\n          user:'1',\n        })\n      });\n\n      const json = await response.json();\n      //const text = await response.text();\n      console.info('newCompletion', json);\n\n      setMessages(previousMessages => GiftedChat.append(previousMessages , [{\n        _id: String(Math.random() * Math.random()).substr(2),\n        text: (json.body['choices'][0].text||'').trim(),\n        createdAt: new Date,\n        user: {\n          _id:'2',\n          name:'Kayleen',\n          avatar:'https://placeimg.com/140/140/tech', \n        },\n      }]));\n\n    } catch (e) {\n      if (e.response) {\n        console.error('newCompletion', e.response.status, e.response.data);\n      } else {\n        console.error('newCompletion', e.message);\n      }\n    } finally {\n      setTyping(false);\n    }\n  };\n\n  const onSend = useCallback((messages = []) => {\n    (async () => {\n      console.log('onSend', JSON.stringify(messages));\n      setMessages(previousMessages => GiftedChat.append(previousMessages , messages));\n      await newCompletion(messages);\n    })()\n  }, []);\n\n  return (\n    <View style={{ flex: 1, backgroundColor: '#fff', }}>\n      <GiftedChat messages={messages}\n                  isTyping={isTyping}\n                  onSend={messages => onSend(messages)}\n                  user={{ _id:'1', name:'Me', avatar:'https://placeimg.com/140/140/people', }}\n                  showUserAvatar={true}\n                  showAvatarForEveryMessage={true}\n                  renderUsernameOnMessage={true}/>\n\n      { Platform.OS === 'android' && \n      <KeyboardAvoidingView behavior=\"padding\" /> }\n\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n};"],"sourceRoot":""}